\begin_init
    #registers quantum = 3
    #registers classical = 3
    #iters = 1000

    #set classical states -> 0,0,0
    #set quantum states -> {1,0}, {1,0}, {1,0}

    block BellGen (i, j) -> j [
        $ Start with Hadamard $
        H -> i
        $ Apply C-X $
        X : i -> j
    ]

    block BellGen2 (i,j,k) -> (j,g) [
        $ Start with Hadamard $
        H -> i
        $ Apply C-X $
        X : i -> j
    ]

    gate myGate = [[1,2],[(3,4),(4,7)],[6,7]]
    gate myGate2 =[[1,2],[(3,1),(4,7)],[6,7]]
\end_init

\begin_main
    BellGen : 1 -> 4
    H -> 4
    3 ? X : (4,5,6) -> 4

    0 ? BellGen2 (2,3,4) -> (4,3)

    measure : 0 -> 1

    for i in (4:5:3){
        condition(((x+y >= z) || (u == true)) && (z <= 3)){
            measure : 1 -> 2
        }
        otherwise(y ^ z != z | x){
            measure : 2 -> 0
        }
        otherwise{
            H -> 4
        }
    }

    for_lex (x,y,z) in (1:2:1,2:3:1,1:1){
        BellGen2 (2,3,4) -> (4,3)
        X : (1,2,23) -> 1
    }

\end_main

\begin_output

    uint t = c_output[0] * c_output[1] * c_output[2]
    
\end_output