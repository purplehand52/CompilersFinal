\begin_init
    #registers quantum = 4
    #registers classical = 4
    #iters = 1000

    #set classical states -> 0,0,0,0
    #set quantum states -> {1,0}, {1,0}, {1,0},{1,0}

    block BellGen (i, j) -> j [
        $ Start with Hadamard $
        H -> i
        $ Apply C-X $
        X : i -> j
    ]

    block BellGen2 (i,j,k) -> (j,g) [
        $ Start with Hadamard $
        H -> i
        $ Apply C-X $
        X : i -> j
    ]

\end_init

\begin_main
    for_zip (i,j) in (0:3,0:3){
        condition (i == j/2){
        X -> i        $ block call with control->target $
        }
        otherwise (i==1){
        Y ->j
        }
        otherwise {
        Z -> i
        }
    }    
    H -> 3
    \barrier
    (1,2, !3) ? Y : (0,1) -> 2
    measure: 1->0
    BellGen2 (2,3,0)
\end_main

\begin_output $

    list[float] d = [2, 4z, 1, 5]

    complex g = [1,2,3] @ [1,2,3]

    list[int] h = [1, 2, 3, 4, 5]

    list[float] p = add([1.2, 2, 3], [4, 5, 6])

    complex q = dot([1.2, 2, 3], [4, 5, 6])

    float r = var([3, 4, 5, 6, 7, 8, 7, 8, 9])

    list[uint] s = [1] + condense([1, 2, 2, 4, 5, 6, 7, 8], (0, 1, 2))

    complex t = avg([(3, 4), (3, -4), (12, 13), 9, 5.10])

    list[uint] v = [1, 2, 3] & [5, 4, 6]

    int w = 45 | -90

    echo(c) $
    
\end_output